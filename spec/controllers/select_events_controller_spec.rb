require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SelectEventsController do
  before(:each) do
      sign_in_user
      @location = FactoryGirl.create(:location)
      @account = @location.account
      @contact = @location.contact
      #@account ||= FactoryGirl.create :account
      request.env['HTTPS'] = 'on'
  end
  # This should return the minimal set of attributes required to create a valid
  # SelectEvent. As you add validations to SelectEvent, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { :ready_and_bagged => 50, :delivery_time  => 24.hours.from_now,
                             :ordering_window_start_time => 34.hours.from_now,
                             :ordering_window_end_time => 30.hours.from_now,
                             :user_contribution_required => true,
                             :user_contribution_cents => 500,
                             :account_id => @account.id, :location_id => @location.id, :contact_id => @contact.id } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SelectEventsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET show" do
    it "assigns the requested select_event as @select_event" do
      select_event = SelectEvent.create! valid_attributes
      get :show, {:id => select_event.to_param}
      assigns(:select_event).should eq(select_event)
    end
  end

  #describe "GET new" do
  #  it "assigns a new select_event as @select_event" do
  #    get :new
  #    assigns(:select_event).should be_a_new(SelectEvent)
  #    assigns(:select_event).kind_of(SelectEvent).should be_true
  #  end
  #end

  describe "GET edit" do
    it "assigns the requested select_event as @select_event" do
      select_event = SelectEvent.create! valid_attributes
      get :show, {:id => select_event.to_param}
      assigns(:select_event).should eq(select_event)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new SelectEvent" do
        expect {
          post :create, {:select_event => valid_attributes}
        }.to change(SelectEvent, :count).by(1)
      end

      it "assigns a newly created select_event as @select_event" do
        post :create, {:select_event => valid_attributes}
        assigns(:select_event).should be_a(SelectEvent)
        assigns(:select_event).should be_persisted
      end

      it "redirects to the created select_event" do
        post :create, {:select_event => valid_attributes}
        response.should redirect_to(SelectEvent.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved select_event as @select_event" do
        # Trigger the behavior that occurs when invalid params are submitted
        SelectEvent.any_instance.stub(:save).and_return(false)
        post :create, {:select_event => {  }}
        assigns(:select_event).should be_a_new(SelectEvent)
      end

      it "re-renders the 'new' template" do
        pending "this was commented out..."
        # Trigger the behavior that occurs when invalid params are submitted
        SelectEvent.any_instance.stub(:save).and_return(false)
        post :create, {:select_event => {  }}
        response.should render_template(events_url)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested select_event" do
        select_event = SelectEvent.create! valid_attributes
        expect do
          put :update, {:id => select_event.id, :select_event => { "ready_and_bagged" => "600" }}
          select_event.reload
        end.to change(select_event, :ready_and_bagged).to(600)
      end

      it "assigns the requested select_event as @select_event" do
        select_event = SelectEvent.create! valid_attributes
        put :update, {:id => select_event.to_param, :select_event => valid_attributes}
        assigns(:select_event).should eq(select_event)
      end

      it "redirects to the select_event" do
        select_event = SelectEvent.create! valid_attributes
        put :update, {:id => select_event.to_param, :select_event => valid_attributes}
        response.should redirect_to(select_event)
      end
    end

    describe "with invalid params" do
      it "assigns the select_event as @select_event" do
        select_event = SelectEvent.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SelectEvent.any_instance.stub(:save).and_return(false)
        put :update, {:id => select_event.to_param, :select_event => {  }}
        assigns(:select_event).should eq(select_event)
      end

      it "re-renders the 'edit' template" do
        select_event = SelectEvent.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SelectEvent.any_instance.stub(:save).and_return(false)
        put :update, {:id => select_event.to_param, :select_event => {  }}
        response.should render_template(select_event)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested select_event" do
      select_event = SelectEvent.create! valid_attributes
      expect {
        delete :destroy, {:id => select_event.to_param}
      }.to change(SelectEvent, :count).by(-1)
    end

    it "redirects to the select_events list" do
      select_event = SelectEvent.create! valid_attributes
      delete :destroy, {:id => select_event.to_param}
      response.should redirect_to(select_events_url)
    end
  end

end
